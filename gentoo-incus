#!/bin/bash

set -Eeuo pipefail

SCRIPTPATH="$( cd -- "$(dirname "$0")" &>/dev/null && pwd )"

usage() {
    cat <<EOF
Description:
  Based on the latest-stage3.txt file, list all stage3 or call distrobuilder
  to create a new image, which may be a container or a virtual machine.

Usage:
    $(basename "${BASH_SOURCE[0]}") [flags]

Examples:
    $(basename "${BASH_SOURCE[0]}") -l
        List all stage3, show if it can build new images

    $(basename "${BASH_SOURCE[0]}") -t container openrc
        Create image of Container based on the following stage file:
          - stage3-amd64-openrc-2023**.tar.xz

    $(basename "${BASH_SOURCE[0]}") -t vm systemd-mergedusr
        Create image of VM based on the following stage file:
          - stage3-amd64-systemd-mergedusr-2023*.tar.xz
EOF
exit
}

declare -A args=()
declare -a args_actions=()
declare sub_cmd="image"
declare image_sub_cmd="build"

parser_params() {
    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--help)
                usage
                ;;
            --debug)
                set -x
                shift
                ;;
            image|create|copy|launch|exec)
                args['sub_cmd']="gentoo_incus_${1}"
                args['sub_cmd_parser']="gentoo_incus_${1}_parser_params"
                shift
                break
                ;;
            *)
                die "Unknown Sub Command : $1"
                ;;
        esac
    done

    gentoo_incus_image_parser_params() {
        while [[ $# -gt 0 ]]; do
            case "${1-}" in
                -h|--help)
                    echo "TODO"
                    shift
                    ;;
                -l|--list)
                    list_only=true
                    shift
                    ;;
                -t|--type)
                    if [[ $# -le 1 ]]; then
                        die "missing type"
                    fi
                    case ${2} in
                        cn|cnt|container)
                            incus_type="container"
                            ;;
                        vm|virtual-machine)
                            incus_type="vm"
                            ;;
                        all)
                            incus_type="vm,container"
                            ;;
                    esac
                    shift 2
                    ;;
                *)
                    specified_stage3s=( "${@}" )
                    break
                    ;;
            esac
        done
    }

    gentoo_incus_create_parser_params() {
        local is_vm=false
        local key
        local image

        # TODO: add arg
        local cpu
        local memory
        cpu="$(( $(nproc) / 4 ))"
        memory="$(awk '/MemTotal/ {print $2}' /proc/meminfo)"
        memory="$(( memory / 1024 / 1024 / 4 ))"

        action_add() {
            args_actions+=( $# "${@}" )
        }

        instance_init_minial() {
            action_add main_tree_switch_to_git
            action_add emerge --sync
            action_add emerge --update --deep --newuse --backtrack=300 @world
            action_add emerge --noreplace app-eselect/eselect-repository app-portage/flaggie
            #action_add emerge --depclean
        }
        instance_init_stable() {
            action_add makeconf_update "FEATURES"             "buildpkg"
            action_add makeconf_update 'COMMON_FLAGS'        "-O2 -pipe -ggdb -fdiagnostics-color=always -frecord-gcc-switches"
            action_add makeconf_update 'LDFLAGS'              "\${LDFLAGS} -Wl,--defsym=__gentoo_check_ldflags__=0"
            action_add makeconf_update 'PORTAGE_ELOG_CLASSES' "warn error info log qa"
            action_add makeconf_update 'PORTAGE_ELOG_SYSTEM'  "save"
            action_add makeconf_update 'EMERGE_DEFAULT_OPTS'  "--verbose --quiet --noreplace --autounmask-continue --autounmask-write"
            action_add makeconf_update "GENTOO_MIRRORS"       "https://mirrors.bfsu.edu.cn/gentoo/"
            action_add makeconf_update_makeopts
            action_add makeconf_update "ACCEPT_LICENSE"       '*'
            action_add makeconf_update "GRUB_PLATFORMS"       "efi-64"
            action_add makeconf_update 'BINPKG_FORMAT'        "gpkg"
            instance_init_minial
        }
        instance_init_stable_with_all_targets() {
            action_add makeconf_update 'LUA_SINGLE_TARGET'    "lua5-1"
            action_add makeconf_update 'LUA_TARGETS'          "lua5-1 lua5-2 lua5-3 lua5-4"
            action_add makeconf_update 'PYTHON_SINGLE_TARGET' "python3_11"
            action_add makeconf_update 'PYTHON_TARGETS'       "python3_10 python3_11 python3_12"
            action_add makeconf_update 'RUBY_TARGETS'         "ruby30 ruby31"
            instance_init_stable
            action_add emerge_install_script dev
        }
        instance_init_testing() {
            action_add makeconf_update_testing_keyword
            instance_init_stable
        }
        instance_init_testing_with_all_targets() {
            action_add makeconf_update_testing_keyword
            instance_init_stable_with_all_targets
        }

        while [[ $# -gt 0 ]]; do
            case "${1-}" in
                -h|--help)
                    echo "TODO"
                    shift
                    ;;
                --vm)
                    is_vm=true
                    shift
                    ;;
                --init-minial)
                    instance_init_minial
                    shift;
                    ;;
                --init-stable)
                    instance_init_stable
                    shift;
                    ;;
                --init-stable-with-all-targets)
                    instance_init_stable_with_all_targets
                    shift;
                    ;;
                --init-testing)
                    instance_init_testing
                    shift;
                    ;;
                --init-testing-with-all-targets)
                    instance_init_testing_with_all_targets
                    shift;
                    ;;
                -g|--git)
                    args['gentoo_sync_type']='git'
                    shift;
                    ;;
                -m|--make-conf)
                    if [[ $# -lt 3 ]] || [[ "$2" == -* ]] || [[ "$3" == -* ]]; then
                        die "/etc/portage/make.conf request 1 or 2 parameters"
                    fi
                    action_add makeconf_update "$2" "$3"
                    shift;
                    ;;
                -s|--install-package-script)
                    if [[ $# -lt 2 ]] || [[ ! " dev dwm fcitx5 " =~ [[:space:]]$2[[:space:]] ]]; then
                        die "Current only support script: dev/dwm/fcitx5"
                    fi
                    action_add emerge_install_script "$2"
                    shift;
                    ;;
                -f|--flaggie)
                    if [[ $# -lt 3 ]] || [[ "$2" == -* ]] || [[ "$3" == -* ]]; then
                        die "flaggie request 1 or 2 parameters"
                    fi
                    action_add flaggie "$2" "$3"
                    shift;
                    ;;
                --install-packages)
                    while [[ $# -ge 2 ]] && [[ "$2" != -* ]]; do
                        action_add flaggie "emerge" "--noreplace" "$2"
                        shift
                    done
                    shift;
                    ;;
                *)
                    break
                    ;;
            esac
        done

        if [[ $# -gt 0 ]]; then
            if "$is_vm"; then
                key="user.gentoo.latest_image.vm.$1"
            else
                key="user.gentoo.latest_image.container.$1"
            fi
            image=$(incus config get "$key")
            if [ -z "$image" ]; then
                image="$1"
            fi

            if incus image show "$image" &>/dev/null; then
                args['image_for_instance']="$image"
                shift
            else
                die "Unknown Image: $1"
            fi
        else
            die "TODO: request image or profile"
        fi

        if [[ $# -gt 0 ]]; then
            args['instance']="$1"
            shift
        else
            local instance
            instance=$(incus image get-property "$image" "user.gentoo.stage3.abi_profile")
            if [ -z "$instance" ]; then
                die "Image property error: user.gentoo.stage3.abi_profile"
            fi
            if "$is_vm"; then
                instance="vm-${instance}"
            fi
            if incus info "$instance" &>/dev/null; then
                #die "Instance $instance exist"
                :
            fi
            # TODO: check stage3 short name
            args['instance']="$instance"
        fi

        args["cpu"]="$cpu"
        args["memory"]="${memory}GiB"
        args['stop']=true
    }

    gentoo_incus_launch_parser_params() {
        gentoo_incus_create_parser_params "$@"
        args['stop']=false
    }

    gentoo_incus_copy_parser_params() {
        while [[ $# -gt 0 ]]; do
            case "${1-}" in
                -h|--help)
                    echo "TODO"
                    shift
                    ;;
                *)
                    break
                    ;;
            esac
        done

        if [[ $# -gt 0 ]]; then
            if incus info "$1"; then
                args["copy_from"]="$1"
                shift
            else
                die "Unknown Image: $1"
            fi
        else
            die "TODO: Request an exist instance"
        fi

        if [[ $# -gt 0 ]]; then
            args['instance']="$1"
            shift
        else
            die "TODO: Request new instance name"
        fi
    }
    ${args['sub_cmd_parser']} "$@"
}

# ENV
declare GENTOO_MIRROR="${GENTOO_MIRROR:-"https://mirrors.ustc.edu.cn/gentoo"}"
declare GENTOO_INCUS_CACHE_DIR="${GENTOO_INCUS_CACHE_DIR:-/tmp/gentoo-distrobuilder}"

declare -rA uname_to_gentoo_keyword=( ["x86_64"]="amd64" )
declare -rA gentoo_stage3_mask=( ["amd64"]="x32" ) # incus not support x32
declare keyword="${uname_to_gentoo_keyword[$(uname -m)]}"

declare incus_type="all"
declare list_only=false

die() {
    local msg=$1
    local code=${2:-1}
    echo >&2 -e "${msg}"
    exit "$code"
}

gentoo_image_run_distrobuilder() {
    declare -A all_size_for_stage3=()
    declare -A all_path_for_stage3=()
    declare -A all_date_for_stage3=()
    declare -A all_file_for_stage3=()
    declare -A all_abi_profile_date_for_stage3=()
    declare -A all_abi_profile_for_stage3=()
    declare -A all_abi_for_stage3=()
    declare -A all_init_system_for_stage3=()
    declare -a all_stage3=()
    declare -a specified_stage3s=()

    gentoo_stage3_info_fetch() {
        local latest_stage3_file="${GENTOO_INCUS_CACHE_DIR}/cache/$keyword/latest-stage3.txt"
        if ! find "$latest_stage3_file" -mtime +1 &> /dev/null; then
            mkdir -p "$(dirname "$latest_stage3_file")"
            local latest_stage3_url="${GENTOO_MIRROR}/releases/$keyword/autobuilds/latest-stage3.txt"
            wget --output-document="$latest_stage3_file" "$latest_stage3_url" >& /dev/null
        fi

        while read -r line ; do
            # line: 20231217T170203Z/stage3-amd64-openrc-20231217T170203Z.tar.xz 285457092
            local size_for_stage3="${line#* }"                                  # 285457092
            local path_for_stage3="${line% *}"                                  # 20231217T170203Z/stage3-amd64-openrc-20231217T170203Z.tar.xz
            local date_for_stage3
            local file_for_stage3
            date_for_stage3=$(dirname "$path_for_stage3")                       # 20231217T170203Z
            file_for_stage3=$(basename "$path_for_stage3")                      # stage3-amd64-openrc-20231217T170203Z.tar.xz
            local abi_profile_date_for_stage3="${file_for_stage3%%.*}"          # stage3-amd64-openrc-20231217T170203Z
            local abi_profile_for_stage3="${abi_profile_date_for_stage3%-*}"    # stage3-amd64-openrc
            local abi_for_stage3="${abi_profile_for_stage3#*-}"                            # amd64-openrc-20231217T170203Z
            abi_for_stage3="${abi_for_stage3%%-*}"                                                    # amd64
            local stage3="${abi_profile_date_for_stage3#*-*-}"                  # openrc-20231217T170203Z
            stage3="${stage3%-*}"                                               # openrc
            local init_system
            if [[ $stage3 = *systemd* ]]; then
                init_system="systemd"
            else
                init_system="openrc"
            fi

            all_size_for_stage3["$stage3"]="$size_for_stage3"
            all_path_for_stage3["$stage3"]="$path_for_stage3"
            all_date_for_stage3["$stage3"]="$date_for_stage3"
            all_file_for_stage3["$stage3"]="$file_for_stage3"
            all_abi_profile_for_stage3["$stage3"]="$abi_profile_for_stage3"
            all_abi_profile_date_for_stage3["$stage3"]="$abi_profile_date_for_stage3"
            all_abi_for_stage3["$stage3"]="$abi_for_stage3"
            all_init_system_for_stage3["$stage3"]="$init_system"
            all_stage3+=( "$stage3" )
        done <<< "$(grep -E '^[0-9].*stage3' "$latest_stage3_file" | grep -vE "${gentoo_stage3_mask[$keyword]}")"
    }

    distrobuilder_run() {
        local stage3="$1"
        local cur_type="$2"
        local name_prefix
        local vm_key
        if [ "$cur_type" = "vm" ]; then
            name_prefix="vm-"
            vm_key="user.gentoo.latest_image.vm"
        else
            name_prefix=""
            vm_key="user.gentoo.latest_image.container"
        fi
        local image_name="${name_prefix}${all_abi_profile_date_for_stage3["$stage3"]}"

        local template_filename="${SCRIPTPATH}/incus/images/${cur_type}-${all_init_system_for_stage3["$stage3"]}.yaml"
        local target_dir="${GENTOO_INCUS_CACHE_DIR}/cache/images"
        local build_args=( '--debug' '--timeout' '3600' )
        build_args+=( 'build-incus' "$template_filename" "$target_dir" )
        if [ "$cur_type" = "vm" ]; then
            build_args+=( "--vm" )
            name_prefix="vm-"
        fi

        if ! incus image show "$image_name" &>/dev/null; then
            build_args+=( --type=unified )
            build_args+=( --compression xz )
            build_args+=( -o image.architecture="${all_abi_for_stage3[$stage3]}" )
            build_args+=( -o image.variant="$stage3" )
            build_args+=( -o image.serial="${all_date_for_stage3["$stage3"]}" )
            build_args+=( -o image.name="${image_name}" )
            build_args+=( -o source.variant="$stage3" )

            echo doas distrobuilder "${build_args[@]}"
            doas distrobuilder "${build_args[@]}"                 # TODO: doas or sudo or no password

            local image_tarball="${target_dir}/${name_prefix}${all_file_for_stage3[$stage3]}"
            local image_kvs=(
                "user.gentoo.stagebuild_3.size=${all_size_for_stage3[$stage3]}"
                "user.gentoo.stage3.path=${all_path_for_stage3[$stage3]}"
                "user.gentoo.stage3.date=${all_date_for_stage3[$stage3]}"
                "user.gentoo.stage3.file=${all_file_for_stage3[$stage3]}"
                "user.gentoo.stage3.abi_profile_date=${all_abi_profile_date_for_stage3["$stage3"]}"
                "user.gentoo.stage3.abi_profile=${all_abi_profile_for_stage3["$stage3"]}"
                "user.gentoo.stage3.abi=${all_abi_for_stage3["$stage3"]}"
                "user.gentoo.init_system=${all_init_system_for_stage3["$stage3"]}"
            )
            echo incus image import --alias "$image_name" "$image_tarball" "${image_kvs[@]}"
            incus image import --alias "$image_name" "$image_tarball" "${image_kvs[@]}"

            local global_kvs=(
                "$vm_key.$stage3=$image_name"
            )
            echo incus config set "${global_kvs[@]}"
            incus config set "${global_kvs[@]}"
        else
            echo "Image $image_name exist, do nothing"
        fi
    }

    gentoo_stage3_info_fetch

    local -n stage3s
    if [[ "${#specified_stage3s[*]}" -gt 0 ]]; then
        local gentoo_stage3s=" ${all_stage3[*]} "
        for s in "${specified_stage3s[@]}"; do
            if [[ !  $gentoo_stage3s == *" $s "* ]]; then
                echo "$gentoo_stage3s"
                die "Unknow stage3: $s"
            fi
        done
        stage3s="specified_stage3s"
    else
        stage3s="all_stage3"
    fi

    if "$list_only"; then
        for stage3 in "${stage3s[@]}"; do
            echo "$stage3"
        done
    else
        for stage3 in "${stage3s[@]}"; do
            case "$incus_type" in
                "container")
                    distrobuilder_run "$stage3" "container"
                    ;;
                "vm")
                    distrobuilder_run "$stage3" "vm"
                    ;;
                "all")
                    distrobuilder_run "$stage3" "container"
                    distrobuilder_run "$stage3" "vm"
                    ;;
            esac
        done
    fi
}

gentoo_incus_image() {
    case "$image_sub_cmd" in
        build)
            gentoo_image_run_distrobuilder
            ;;
        list)
            # TODO
            echo "TODO"
            ;;
        *)
            die "Unknown Image Sub-Commnad"
            ;;
    esac
}

gentoo_incus_create() {
    # find image from stage3 image
    #   - latest version
    #
    # config in incus
    #   - need_run
    #       - update_makeconf
    #       - preinstall_package_set
    #       - gentoo_witch_to_git
    # config in instance
    #   - make.conf
    #       - COMMON_FLAGS
    #       - GENTOO_MIRRORS
    #       - MAKEOPTS
    #       - GRUB_PLATFORMS
    #       - FEATURES
    #       - ACCEPT_KEYWORDS
    #       - ACCEPT_LICENSE
    #       - USE
    #       - RUBY_TARGETS
    #       - RUBY_SINGLE_TARGETS
    #       - PYTHON_SINGLE_TARGETS
    #       - LUA_SINGLE_TARGETS
    #       - EMERGE_DEFAULT_OPTS
    #       - VIDEO_CARDS
    #   - preinstall package set
    #       - base
    #           - git
    #           - eselect-repository
    #           - flaggie
    #       - dev packages
    #       - htop
    #       - dwm
    #       - fcitx5
    #   - gentoo_sync_type
    #   - emerge
    #       - sync
    #       - update
    #       - depclean
    #

    # TODO: binpkgs

    local image="${args[image_for_instance]}"
    local instance="${args[instance]}"

    incus create "$image" "$instance"
    incus config device add "$instance" "bin" disk source="${SCRIPTPATH}"/instance/rootfs/bin path="/root/bin" "shift=true"
    incus config device add "$instance" "etc" disk source="${SCRIPTPATH}"/instance/rootfs/etc path="/root/etc" "shift=true"
    incus config device add "$instance" "user" disk source="${SCRIPTPATH}"/instance/rootfs/home path="/root/home" "shift=true"
    incus config device add "$instance" "repos" disk source="${SCRIPTPATH}"/cache/repos path="/root/repos" "shift=true"
    incus config device add "$instance" "distfiles" disk source="/var/cache/distfiles" path="/var/cache/distfiles" "shift=true"
    incus config set "$instance" limits.cpu="${args[cpu]}"
    incus config set "$instance" limits.memory="${args[memory]}"

    incus start "$instance"
    while ! incus info stage3-amd64-desktop-openrc  | grep -E 'Processes: [0-9]+' &>/dev/null; do
        sleep 1
    done
    while ! incus exec "$instance" ip address show scope global | grep 'inet.* scope global'; do
        sleep 1
    done

    local i=0
    for ((i = 0; i < ${#args_actions[@]};)); do
        local offset="${args_actions[$i]}"
        i=$((i+1))
        incus exec "$instance" -- /root/bin/instance-exec "${args_actions[@]:$i:$offset}"
        i=$((i+offset))
    done

    if "${args['stop']}"; then
        incus stop "$instance"
    fi
}

gentoo_incus_launch() {
    gentoo_incus_create
}

gentoo_incus_copy() {
    echo incus copy "${args[copy_from]}" "${args[instance]}"
}

gentoo_incus_exec() {
    echo incus exec "${args[instance]}" bash
}

parser_params "$@"
"${args[sub_cmd]}" "$@"
