#!/usr/bin/env bash

set -Eeuo pipefail

SCRIPTPATH="$( cd -- "$(dirname "$0")" &>/dev/null && pwd )"

declare GENTOO_INCUS_CACHE_DIR="${GENTOO_INCUS_CACHE_DIR:-/tmp/gentoo-distrobuilder}"
declare GENTOO_MIRROR="${GENTOO_MIRROR:-"https://mirrors.ustc.edu.cn/gentoo"}"

declare -a all_stage3=()
declare -A all_path=()
declare -A all_date=()
declare -A all_file=()
declare -A all_abi_profile_date=()
declare -A all_abi_profile=()
declare -A all_abi=()
declare -A all_init_system=()

declare -rA uname_to_gentoo_keyword=( ["x86_64"]="amd64" )
declare -rA gentoo_stage3_mask=( ["amd64"]="x32" ) # incus not support x32
declare keyword="${uname_to_gentoo_keyword[$(uname -m)]}"


declare -a config_actions=()
declare -A args=(
    ["pretend"]=false
    ["instance_type"]="ctr"
    ['config_update']=false
    ['limit_cpu']="8"
    ['limit_memory']="32GiB"
    ['stop_after_create']=true
    ['init']='--init-stable'
    ['build_image']=true
)

declare -a instance_all_runs=(
    --init-gentoo-repo
    --init-make-conf-base
    --init-all-targets
    --init-testing
    --install-essential-tool
    --install-dev-tool
    --install-dwm
    --install-fcitx5
)

die() {
    local msg=$1
    local code=${2:-1}
    echo >&2 -e "${msg}"
    exit "$code"
}

run() {
    if "${args[pretend]}"; then
        echo "$@"
    else
        "$@"
    fi
}

config_action_add() {
    config_actions+=( $# "${@}" )
}

gentoo_stage3_info_fetch() {
    local latest_stage3_file="${GENTOO_INCUS_CACHE_DIR}/cache/$keyword/latest-stage3.txt"
    if ! find "$latest_stage3_file" -mtime +1 &> /dev/null; then
        mkdir -p "$(dirname "$latest_stage3_file")"
        local latest_stage3_url="${GENTOO_MIRROR}/releases/$keyword/autobuilds/latest-stage3.txt"
        wget --output-document="$latest_stage3_file" "$latest_stage3_url" >& /dev/null
    fi

    while read -r line ; do
        local path date file abi abi_profile abi_profile_date stage3 init_system
        # line: 20231217T170203Z/stage3-amd64-openrc-20231217T170203Z.tar.xz 285457092
        path="${line% *}"                               # 20231217T170203Z/stage3-amd64-openrc-20231217T170203Z.tar.xz
        date="$(dirname "$path")"                       # 20231217T170203Z
        file="$(basename "$path")"                      # stage3-amd64-openrc-20231217T170203Z.tar.xz
        file="${file#*-}"                               # amd64-openrc-20231217T170203Z.tar.xz
        abi_profile_date="${file%%.*}"                  # amd64-openrc-20231217T170203Z
        abi_profile="${abi_profile_date%-*}"            # amd64-openrc
        abi="${abi_profile%%-*}"                        # amd64
        stage3="${abi_profile_date#*-}"                 # openrc-20231217T170203Z
        stage3="${stage3%-*}"                           # openrc
        if [[ $stage3 = *systemd* ]]; then
            init_system="systemd"
        else
            init_system="openrc"
        fi

        all_stage3+=( "$stage3" )
        all_path["$stage3"]="$path"
        all_date["$stage3"]="$date"
        all_file["$stage3"]="$file"
        all_abi_profile["$stage3"]="$abi_profile"
        all_abi_profile_date["$stage3"]="$abi_profile_date"
        all_abi["$stage3"]="$abi"
        all_init_system["$stage3"]="$init_system"
    done <<< "$(grep -E '^[0-9].*stage3' "$latest_stage3_file" | grep -vE "${gentoo_stage3_mask[$keyword]}")"
}

distrobuilder_run() {
    local stage3="$1"
    local type="${2:-${args[instance_type]}}"
    local image_name
    local template_filename target_dir
    local build_args=()
    local image_tarball
    local image_kvs

    # global flags
    build_args+=( '--debug' '--timeout' '3600' )

    image_name="${type}-${all_abi_profile_date["$stage3"]}"
    if ! incus image show "$image_name" &>/dev/null; then
        # build-incus
        template_filename="${SCRIPTPATH}/incus/images/${type}-${all_init_system["$stage3"]}.yaml"
        target_dir="${GENTOO_INCUS_CACHE_DIR}/cache/images"
        build_args+=( 'build-incus' "$template_filename" "$target_dir" )
        [ "$type" = "vm" ] && build_args+=( "--vm" )
        build_args+=( --type=unified )
        build_args+=( --compression xz )
        build_args+=( -o image.architecture="${all_abi[$stage3]}" )
        build_args+=( -o image.variant="${all_init_system["$stage3"]}" )
        build_args+=( -o image.serial="${all_date["$stage3"]}" )
        build_args+=( -o image.name="${image_name}" )
        build_args+=( -o source.variant="$stage3" )

        image_tarball="${target_dir}/${type}-${all_file[$stage3]}"
        image_kvs=(
            "user.gentoo.stage3.path=${all_path[$stage3]}"
            "user.gentoo.stage3.date=${all_date[$stage3]}"
            "user.gentoo.stage3.file=${all_file[$stage3]}"
            "user.gentoo.stage3.abi_profile_date=${all_abi_profile_date["$stage3"]}"
            "user.gentoo.stage3.abi_profile=${all_abi_profile["$stage3"]}"
            "user.gentoo.stage3.abi=${all_abi["$stage3"]}"
            "user.gentoo.stage3.init_system=${all_init_system["$stage3"]}"
            "user.gentoo.stage3.default_name=${type}-${all_abi_profile["$stage3"]}"
        )

        run doas distrobuilder "${build_args[@]}"                 # TODO: doas or sudo or no password
        run incus image import --alias "$image_name" "$image_tarball" "${image_kvs[@]}"
        run incus config set "user.gentoo.image.latest.$type.$stage3=$image_name"
    else
        echo "Image $image_name exist, do nothing"
    fi
}

incus_check_type() {
    if [[ $# -gt 1 ]]; then
        case "$2" in
            vm|virtual-machine)
                args['instance_type']="vm"
                ;;
            ctr|container)
                args['instance_type']="ctr"
                ;;
            all)
                args['instance_type']="all"
                ;;
            *)
                die "Unknown instance type : $2"
                ;;
        esac
    else
        die "instance type request 1 parameter"
    fi
}

distrobuilder_run_all() {
    for s in "${@}"; do
        if [ "${args['instance_type']}" = "all" ]; then
            distrobuilder_run "$s" "ctr"
            distrobuilder_run "$s" "vm"
        else
            distrobuilder_run "$s"
        fi
    done
}

incus_image_build() {
    usage() {
        cat <<EOF
image build usage: TODO
EOF
        exit 1
    }

    gentoo_stage3_info_fetch

    local -n specified_stage3s
    local -a all_args
    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            -p|--pretend)
                args['pretend']=true
                shift
                ;;
            -t|--type)
                incus_check_type "$@"
                shift 2
                ;;
            -a|--all)
                specified_stage3s="all_stage3"
                shift
                ;;
            *)
                all_args=( "$@" )
                specified_stage3s="all_args"
                break
                ;;
        esac
    done

    distrobuilder_run_all "${specified_stage3s[@]}"
}

incus_image_update() {
    usage() {
        cat <<EOF
image update usage: TODO
EOF
        exit 1
    }

    gentoo_stage3_info_fetch

    local -n specified_stage3s
    local -a all_args
    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            -p|--pretend)
                args['pretend']=true
                shift
                ;;
            -t|--type)
                incus_check_type "$@"
                shift 2
                ;;
            -a|--all)
                specified_stage3s="all_stage3"
                shift
                ;;
            *)
                all_args=( "$@" )
                specified_stage3s="all_args"
                break
                ;;
        esac
    done

    for s in "${specified_stage3s[@]}"; do
        local value
        value=$(incus config get "user.gentoo.image.latest.${args[instance_type]}.$s")
        if [ -n "$value" ]; then
            local cur="${all_abi_profile_date[$s]}"
            if [[ "$value" > "$cur" ]]; then
                distrobuilder_run_all "$s"
            fi
        fi
    done
}

incus_image_list() {
    usage() {
        cat <<EOF
image list: TODO
EOF
        exit 1
    }
    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            -t|--type)
                incus_check_type "$@"
                shift 2
                ;;
            *)
                echo "incus image list unknown option: $1"
                usage
                ;;
        esac
    done

    local key
    case "${args['instance_type']}" in
        all)
            key="-stage3-"
            ;;
        ctr)
            key="crt-stage3-"
            ;;
        vm)
            key="vm-stage3-"
            ;;
        *)
            die "incus image list: TODO"
            ;;
    esac
    incus image list -- "$key"
}

incus_image() {
    usage() {
        cat <<EOF
image usage: TODO
EOF
        exit 1
    }
    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            build)
                shift
                incus_image_build "$@"
                break
                ;;
            update)
                shift
                incus_image_update "$@"
                break
                ;;
            list)
                shift
                incus_image_list "$@"
                break
                ;;
            rm|remove)
                echo "TODO"
                shift
                ;;
            *)
                echo "Image Unknown Commnad: $1"
                usage
                ;;
        esac
    done
}

incus_exec() {
    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            --init)
                shift
                echo incus exec "$instance" -- "$@"
                ;;
            *)
                echo incus exec "$instance" -- "$@"
                break
                ;;
        esac
    done
}

incus_start_and_wait() {
    local instance="$1"
    incus start "$instance" &>/dev/null || true
    while ! incus info "$instance"   | grep -E 'Processes: [0-9]+' &>/dev/null; do
        sleep 1
    done
    while ! incus exec "$instance" ip address show scope global | grep 'inet.* scope global' &>/dev/null; do
        sleep 1
    done
}

incus_create() {
    usage() {
        cat <<EOF
incus create: TODO
EOF
        exit 1
    }

    local -a pargs=()

    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            -p|--pretend)
                args['pretend']=true
                shift
                ;;
            -t|--type)
                incus_check_type "$@"
                shift 2
                ;;
            --cpu)
                args['limit_cpu']="$2"
                shift 2
                ;;
            --memory)
                args['limit_memory']="$2"
                shift 2
                ;;
            --update)
                # TODO : yes/no
                args['config_update']=true
                shift
                ;;
            --init-*)
                args['init']="$1"
                shift
                ;;
            --install-*)
                args['install']="$1"
                shift
                ;;
            -*)
                die "Unknown flags"
                ;;
            *)
                pargs+=( "$1" )
                shift
                ;;
        esac
    done

    if [[ "${#pargs[@]}" -gt 0 ]]; then
        local stage3="${pargs[0]}"
        local image
        image=$(incus config get "user.gentoo.image.latest.${args[instance_type]}.$stage3")
        if [ -z "$image" ]; then
            image="$stage3" # not stage3, maybe it is an image
        fi
        if ! incus image show "$image" &>/dev/null; then
            die "Unknown Image: $stage3"
        fi
    else
        die "TODO: request image or profile"
    fi

    local instance
    if [[ "${#pargs[@]}" -gt 1 ]]; then
        instance="${pargs[1]}"
    else
        instance=$(incus image get-property "$image" "user.gentoo.stage3.default_name")
        instance="${instance}-${args['init']#--init-}"
        if [ -z "$instance" ]; then
            die "Image property error: user.gentoo.stage3.abi_profile"
        fi
        if incus info "$instance" &>/dev/null; then
            die "Instance $instance exist"
        fi
    fi

    incus create "$image" "$instance"
    incus config device add "$instance" "bin" disk source="${SCRIPTPATH}/incus/rootfs/bin" path="/root/bin" "shift=true"
    incus config device add "$instance" "lib" disk source="${SCRIPTPATH}/incus/rootfs/lib" path="/root/lib" "shift=true"
    incus config device add "$instance" "etc" disk source="${SCRIPTPATH}/incus/rootfs/etc" path="/root/etc" "shift=true"
    incus config device add "$instance" "user" disk source="${SCRIPTPATH}/incus/rootfs/home" path="/root/home" "shift=true"
    incus config device add "$instance" "repos" disk source="${SCRIPTPATH}/cache/repos" path="/root/repos" "shift=true"
    incus config device add "$instance" "distfiles" disk source="/var/cache/distfiles" path="/var/cache/distfiles" "shift=true"
    incus config set "$instance" limits.cpu="${args[limit_cpu]}"
    incus config set "$instance" limits.memory="${args[limit_memory]}"
    incus config set "$instance" "user.gentoo.inited=0"

    incus_start_and_wait "$instance"

    if [ -n "${args['init']+abc}" ]; then
        if incus exec "$instance" -- /root/bin/init.sh "${args['init']}"; then
           incus config set "$instance" "user.gentoo.inited=${args['init']#--}"
        fi
    fi
    if [ -n "${args['install']+abc}" ]; then
        if incus exec "$instance" -- /root/init/install.sh "${args['install']}"; then
            incus config set "$instance" "user.gentoo.${args['install']#--}=1"
        fi
    fi

    # stop if need
    if "${args['stop_after_create']}"; then
        incus stop "$instance"
    fi

    incus snapshot create "$instance" latest
}

incus_launch() {
    args['stop_after_create']=false
    incus_create "$@"
}

incus_copy() {
    usage() {
        cat <<EOF
incus copy: TODO
EOF
        exit 1
    }

    local -a pargs=()

    args['config_update']=false
    local init_runs=()

    init_runs_add() {
        if ! [[ " ${init_runs[*]} " =~ [[:space:]]$1[[:space:]] ]]; then
            init_runs+=( "$1" )
        fi
    }

    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            -p|--pretend)
                args['pretend']=true
                shift
                ;;
            -t|--type)
                incus_check_type "$@"
                shift 2
                ;;
            --cpu)
                args['limit_cpu']="$2"
                shift 2
                ;;
            --memory)
                args['limit_memory']="$2"
                shift 2
                ;;
            --init-minial)
                init_runs_add "--init-gentoo-repo"
                shift
                ;;
            --init-stable)
                init_runs_add "--init-gentoo-repo"
                init_runs_add "--init-make-conf-base"
                init_runs_add "--install-essential-tool"
                shift
                ;;
            --init-stable-all)
                init_runs_add "--init-gentoo-repo"
                init_runs_add "--init-make-conf-base"
                init_runs_add "--init-all-targets"
                init_runs_add "--update"
                init_runs_add "--install-essential-tool"
                shift
                ;;
            --init-testing)
                init_runs_add "--init-gentoo-repo"
                init_runs_add "--init-make-conf-base"
                init_runs_add "--init-testing"
                init_runs_add "--update"
                init_runs_add "--install-essential-tool"
                shift
                ;;
            --init-testing-all)
                init_runs_add "--init-gentoo-repo"
                init_runs_add "--init-make-conf-base"
                init_runs_add "--init-all-targets"
                init_runs_add "--init-testing"
                init_runs_add "--update"
                init_runs_add "--install-essential-tool"
                shift
                ;;
            --install-*)
                init_runs_add "$1"
                shift
                ;;
            *)
                pargs+=( "$1" )
                shift
                ;;
        esac
    done

    local stage3
    local image
    local new_instance
    local filter
    local filtered_instances
    local is_create

    gentoo_stage3_info_fetch

    if [[ "${#pargs[@]}" -gt 0 ]]; then
        stage3="${pargs[0]}"
        if ! [[ " ${all_stage3[*]} " =~ [[:space:]]${stage3}[[:space:]] ]]; then
            die "Request an exist image or stage3: ${stage3}"
        fi
        image=$(incus config get "user.gentoo.image.latest.${args[instance_type]}.$stage3")
        if [ -z "$image" ]; then
            is_create=true
            distrobuilder_run "$stage3" "${args[instance_type]}"
            image=$(incus config get "user.gentoo.image.latest.${args[instance_type]}.$stage3")
        fi
    else
        die "request stage3 name"
    fi

    if [[ "${#pargs[@]}" -gt 1 ]]; then
         new_instance="${pargs[1]}"
         if incus info "$new_instance" &>/dev/null; then
             die "instance exist: $new_instance"
         fi
    else
        new_instance="${image%-*}-$(date "+%Y%m%dT%H%M%SZ")"
    fi

    echo "${init_runs[@]}"

    local new_tpl_instance
    local cur_tpl_instance

    filter="${args["instance_type"]}-${all_abi_profile["$stage3"]}-tpl-"
    filtered_instances=$(incus list --format csv --columns n "$filter")
    if [ -n "$filtered_instances" ]; then
        is_create=false
        filtered_instances=$(echo "$filtered_instances" | sort -r)

        local cur_attr=0
        local columns=""
        for run in "${!instance_all_runs[@]}"; do
            columns="${columns}user.gentoo.init.${instance_all_runs[$run]#--},"
            if [[ " ${init_runs[*]} " =~ [[:space:]]${instance_all_runs[$run]}[[:space:]] ]]; then
                cur_attr=$((cur_attr | (1 << run)))
                printf "cur_attr: 0x%x\n" "$cur_attr"
            fi
        done
        columns="${columns%,}"

        local latest_remain_attr=0
        local latest_remain_cnt="${#instance_all_runs}"

        while read -r instance; do
            local inited_attr=0
            local remain_attr=0
            local remain_cnt=0

            IFS="," read -r -a init_conf <<< "$(incus list --format csv --columns "$columns" "$instance")"
            for i in "${!init_conf[@]}"; do
                if [ "${init_conf[$i]}" -eq 1 ]; then
                    inited_attr=$((inited_attr | (1 << i)))
                fi
            done
            printf "$instance, inited: 0x%x, cur: 0x%x\n" "$inited_attr" "$cur_attr"

            if [ $inited_attr -eq $cur_attr ]; then
                cur_tpl_instance="$instance"
                latest_remain_attr=0
                latest_remain_cnt=0
                echo "  find full match instance: $instance"
                break
            elif [ $((inited_attr & ~cur_attr)) -ne 0 ]; then
                echo "  skip unumatch instance: $instance"
                continue
            else
                 remain_attr=$((cur_attr & ~inited_attr))
                 local tmp="$remain_attr"
                 while [[ $tmp -gt 0 ]]; do
                    local t=$(( tmp & 1 ))
                    if [[ $t -eq 1 ]];then
                        remain_cnt=$(( remain_cnt + 1 ))
                    fi
                    tmp=$(( tmp / 2 ))
                 done
                 echo "remain_cnt: $remain_cnt, latest_remain_cnt: $latest_remain_cnt"
                 if [[ $remain_cnt -lt $latest_remain_cnt ]]; then
                     cur_tpl_instance="$instance"
                     latest_remain_cnt="$remain_cnt"
                     latest_remain_attr="$remain_attr"
                     printf "  find part match instance: $instance, remain : 0x%x/0x%x\n" "$remain_cnt" "$remain_attr"
                 fi
            fi
        done <<< "$filtered_instances"

        if [ -z "$cur_tpl_instance" ]; then
            die "cur_tpl_instance : TODO"
        fi

        if [ "$latest_remain_attr" -ne 0 ]; then
            init_runs=()
            for run in "${!instance_all_runs[@]}"; do
                echo "$latest_remain_attr/$run"
                echo "$((latest_remain_attr & (1 << run)))"
                if [[ $((latest_remain_attr & (1 << run))) -ne 0 ]]; then
                    init_runs+=( "${instance_all_runs[$run]}" )
                fi
            done
        fi
        echo "init_runs: ${init_runs[@]}"
    else
        is_create=true
    fi

    for r in "${init_runs[@]}"; do
        new_tpl_instance="${image%-*}-tpl-$(date "+%Y%m%dT%H%M%SZ")"
        if "$is_create"; then
            is_create=false
            echo incus create "$image" "$new_tpl_instance"
            incus create "$image" "$new_tpl_instance"
            incus config device add "$new_tpl_instance" "bin" disk source="${SCRIPTPATH}/incus/rootfs/bin" path="/root/bin" "shift=true"
            incus config device add "$new_tpl_instance" "lib" disk source="${SCRIPTPATH}/incus/rootfs/lib" path="/root/lib" "shift=true"
            incus config device add "$new_tpl_instance" "etc" disk source="${SCRIPTPATH}/incus/rootfs/etc" path="/root/etc" "shift=true"
            incus config device add "$new_tpl_instance" "user" disk source="${SCRIPTPATH}/incus/rootfs/home" path="/root/home" "shift=true"
            incus config device add "$new_tpl_instance" "repos" disk source="${SCRIPTPATH}/cache/repos" path="/root/repos" "shift=true"
            incus config device add "$new_tpl_instance" "distfiles" disk source="/var/cache/distfiles" path="/var/cache/distfiles" "shift=true"
            incus config set "$new_tpl_instance" limits.cpu="${args[limit_cpu]}"
            incus config set "$new_tpl_instance" limits.memory="${args[limit_memory]}"
            for ir in "${instance_all_runs[@]}"; do
                incus config set "$new_tpl_instance" "user.gentoo.init.${ir#--}=0"
            done
        else
            echo incus copy "$cur_tpl_instance" "$new_tpl_instance"
            incus copy "$cur_tpl_instance" "$new_tpl_instance"
        fi
        cur_tpl_instance="$new_tpl_instance"

        incus_start_and_wait "$new_tpl_instance"
        echo incus exec "$new_tpl_instance" -- /root/bin/instance.sh "$r"
        if incus exec "$new_tpl_instance" -- /root/bin/instance.sh "$r"; then
            incus config set "$new_tpl_instance" "user.gentoo.init.${r#--}=1"
        else
            # TODO: check cleanup option
            die "TODO"
        fi
        incus exec "$new_tpl_instance" -- shutdown -h now
        incus stop "$new_tpl_instance"
    done

    echo incus copy "$new_tpl_instance" "$new_instance"
    incus copy "$new_tpl_instance" "$new_instance"
}

incus_update() {
    # update
    #
    # remove old snapshot and add new snapshot
    echo "incus_update"
}

incus_list() {
    echo "incus_list"
}

main() {
    usage() {
        cat <<EOF
usage: TODO
EOF
        exit 1
    }
    while [[ $# -gt 0 ]]; do
        case "${1-}" in
            -h|--h)
                usage
                ;;
            image)
                shift
                incus_image "$@"
                break
                ;;
            create)
                shift
                incus_create "$@"
                break
                ;;
            launch)
                shift
                incus_launch "$@"
                break
                ;;
            update)
                shift
                incus_update "$@"
                break
                ;;
            list)
                shift
                incus_list "$@"
                break
                ;;
            copy)
                shift
                incus_copy "$@"
                break
                ;;
            exec)
                shift
                incus_exec "$@"
                break
                ;;
            *)
                echo "Unknown Commnad: $1"
                usage
                ;;
        esac
    done
}

main "$@"
